import { Schema } from "@colyseus/schema";
import Board from "../../core/board";
import { PokemonEntity } from "../../core/pokemon-entity";
import { IPokemonEntity, ISimulation, IStatus } from "../../types";
export default class Status extends Schema implements IStatus {
    burn: boolean;
    silence: boolean;
    fatigue: boolean;
    poisonStacks: number;
    freeze: boolean;
    protect: boolean;
    sleep: boolean;
    confusion: boolean;
    wound: boolean;
    resurection: boolean;
    resurecting: boolean;
    paralysis: boolean;
    pokerus: boolean;
    possessed: boolean;
    locked: boolean;
    blinded: boolean;
    armorReduction: boolean;
    runeProtect: boolean;
    charm: boolean;
    flinch: boolean;
    electricField: boolean;
    psychicField: boolean;
    grassField: boolean;
    fairyField: boolean;
    spikeArmor: boolean;
    magicBounce: boolean;
    reflect: boolean;
    light: boolean;
    curse: boolean;
    curseVulnerability: boolean;
    curseWeakness: boolean;
    curseTorment: boolean;
    curseFate: boolean;
    enraged: boolean;
    skydiving: boolean;
    tree: boolean;
    burnOrigin: PokemonEntity | undefined;
    poisonOrigin: PokemonEntity | undefined;
    silenceOrigin: PokemonEntity | undefined;
    woundOrigin: PokemonEntity | undefined;
    charmOrigin: PokemonEntity | undefined;
    possessedOrigin: PokemonEntity | undefined;
    burnCooldown: number;
    burnDamageCooldown: number;
    silenceCooldown: number;
    fatigueCooldown: number;
    poisonCooldown: number;
    poisonDamageCooldown: number;
    freezeCooldown: number;
    protectCooldown: number;
    sleepCooldown: number;
    confusionCooldown: number;
    woundCooldown: number;
    paralysisCooldown: number;
    armorReductionCooldown: number;
    runeProtectCooldown: number;
    charmCooldown: number;
    flinchCooldown: number;
    enrageCooldown: number;
    spikeArmorCooldown: number;
    magicBounceCooldown: number;
    reflectCooldown: number;
    resurectingCooldown: number;
    curseCooldown: number;
    pokerusCooldown: number;
    possessedCooldown: number;
    lockedCooldown: number;
    blindCooldown: number;
    enrageDelay: number;
    constructor(simulation: ISimulation);
    clearNegativeStatus(): void;
    hasNegativeStatus(): boolean;
    updateAllStatus(dt: number, pokemon: PokemonEntity, board: Board): void;
    triggerArmorReduction(duration: number, pkm: PokemonEntity): void;
    updateArmorReduction(dt: number): void;
    triggerRage(duration: number, pokemon: PokemonEntity): void;
    updateRage(dt: number, pokemon: PokemonEntity): void;
    triggerBurn(duration: number, pkm: PokemonEntity, origin: PokemonEntity | undefined): void;
    updateBurn(dt: number, pkm: PokemonEntity, board: Board): void;
    healBurn(pkm: PokemonEntity): void;
    triggerSilence(duration: number, pkm: PokemonEntity, origin?: PokemonEntity): void;
    updateSilence(dt: number): void;
    triggerFatigue(duration: number, pkm: PokemonEntity): void;
    updateFatigue(dt: number): void;
    triggerPoison(duration: number, pkm: PokemonEntity, origin: PokemonEntity | undefined): void;
    updatePoison(dt: number, pkm: PokemonEntity, board: Board): void;
    triggerFreeze(duration: number, pkm: PokemonEntity): void;
    updateFreeze(dt: number): void;
    triggerProtect(timer: number): void;
    updateProtect(dt: number): void;
    triggerSleep(duration: number, pkm: PokemonEntity): void;
    updateSleep(dt: number, pkm: PokemonEntity): void;
    triggerConfusion(duration: number, pkm: PokemonEntity, origin: PokemonEntity, apBoost?: boolean): void;
    updateConfusion(dt: number, pkm: PokemonEntity): void;
    triggerCharm(duration: number, pkm: IPokemonEntity, origin: PokemonEntity, apBoost?: boolean): void;
    updateCharm(dt: number): void;
    triggerWound(duration: number, pkm: PokemonEntity, origin: PokemonEntity | undefined): void;
    updateWound(dt: number): void;
    triggerParalysis(duration: number, pkm: PokemonEntity, origin: PokemonEntity | null, apBoost?: boolean): void;
    updateParalysis(dt: number, pkm: PokemonEntity): void;
    healParalysis(pkm: PokemonEntity): void;
    triggerRuneProtect(timer: number): void;
    updateRuneProtect(dt: number): void;
    triggerFlinch(duration: number, pkm: PokemonEntity, origin?: PokemonEntity): void;
    updateFlinch(dt: number): void;
    triggerSpikeArmor(timer: number): void;
    updateSpikeArmor(dt: number): void;
    triggerMagicBounce(timer: number): void;
    updateMagicBounce(dt: number): void;
    triggerReflect(timer: number): void;
    updateReflect(dt: number): void;
    addResurrection(pokemon: IPokemonEntity): void;
    triggerResurection(pokemon: PokemonEntity): void;
    updateResurecting(dt: number, pokemon: PokemonEntity): void;
    triggerCurse(timer: number): void;
    updateCurse(dt: number, board: Board, pokemon: PokemonEntity): void;
    triggerPokerus(pokemon: PokemonEntity): void;
    updatePokerus(dt: number, pokemon: PokemonEntity, board: Board): void;
    triggerLocked(duration: number, pkm: PokemonEntity): void;
    updateLocked(dt: number, pokemon: PokemonEntity): void;
    triggerPossessed(duration: number, pkm: PokemonEntity, origin: PokemonEntity): void;
    updatePossessed(dt: number, pkm: PokemonEntity): void;
    triggerBlinded(duration: number, pkm: PokemonEntity): void;
    updateBlinded(dt: number): void;
    private applyAquaticReduction;
    addPsychicField(entity: IPokemonEntity): void;
    removePsychicField(entity: IPokemonEntity): void;
    addElectricField(entity: IPokemonEntity): void;
    removeElectricField(entity: IPokemonEntity): void;
}
