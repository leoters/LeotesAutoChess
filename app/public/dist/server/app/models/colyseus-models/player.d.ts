import { ArraySchema, MapSchema, Schema } from "@colyseus/schema";
import { PokemonEntity } from "../../core/pokemon-entity";
import type GameState from "../../rooms/states/game-state";
import { IPlayer, Role, Title } from "../../types";
import { DungeonPMDO } from "../../types/enum/Dungeon";
import { BattleResult, Team } from "../../types/enum/Game";
import { Item } from "../../types/enum/Item";
import { Pkm, type PkmProposition } from "../../types/enum/Pokemon";
import { Synergy } from "../../types/enum/Synergy";
import { Weather } from "../../types/enum/Weather";
import { Effects } from "../effects";
import type { IPokemonCollectionItem } from "../mongo-models/user-metadata";
import ExperienceManager from "./experience-manager";
import HistoryItem from "./history-item";
import { Pokemon } from "./pokemon";
import { PokemonCustoms } from "./pokemon-customs";
import Synergies from "./synergies";
export default class Player extends Schema implements IPlayer {
    id: string;
    simulationId: string;
    team: Team;
    name: string;
    avatar: string;
    board: MapSchema<Pokemon, string>;
    shop: ArraySchema<Pkm>;
    experienceManager: ExperienceManager;
    synergies: Synergies;
    money: number;
    life: number;
    shopLocked: boolean;
    shopFreeRolls: number;
    streak: number;
    interest: number;
    opponentId: string;
    opponentName: string;
    opponentAvatar: string;
    opponentTitle: string;
    spectatedPlayerId: string;
    boardSize: number;
    items: ArraySchema<Item>;
    rank: number;
    elo: number;
    alive: boolean;
    history: ArraySchema<HistoryItem>;
    pokemonCustoms: PokemonCustoms;
    emotesUnlocked: string;
    title: Title | "";
    role: Role;
    itemsProposition: ArraySchema<Item>;
    pokemonsProposition: ArraySchema<PkmProposition>;
    pveRewards: ArraySchema<Item>;
    pveRewardsPropositions: ArraySchema<Item>;
    loadingProgress: number;
    berryTreesType: Item[];
    berryTreesStage: number[];
    map: DungeonPMDO | "town";
    effects: Effects;
    regionalPokemons: ArraySchema<Pkm>;
    rerollCount: number;
    totalMoneyEarned: number;
    totalPlayerDamageDealt: number;
    eggChance: number;
    goldenEggChance: number;
    wildChance: number;
    commonRegionalPool: Pkm[];
    uncommonRegionalPool: Pkm[];
    rareRegionalPool: Pkm[];
    epicRegionalPool: Pkm[];
    ultraRegionalPool: Pkm[];
    isBot: boolean;
    opponents: Map<string, number>;
    titles: Set<Title>;
    artificialItems: Item[];
    tms: (Item | null)[];
    weatherRocks: Item[];
    randomComponentsGiven: Item[];
    randomEggsGiven: Pkm[];
    lightX: number;
    lightY: number;
    ghost: boolean;
    firstPartner: Pkm | undefined;
    hasLeftGame: boolean;
    bonusSynergies: Map<Synergy, number>;
    pokemonsPlayed: Set<Pkm>;
    constructor(id: string, name: string, elo: number, avatar: string, isBot: boolean, rank: number, pokemonCollection: Map<string, IPokemonCollectionItem>, title: Title | "", role: Role, state: GameState);
    addMoney(value: number, countTotalEarned: boolean, origin: PokemonEntity | null): void;
    addBattleResult(id: string, name: string, result: BattleResult, avatar: string, weather: Weather | undefined): void;
    getPokemonAt(x: number, y: number): Pokemon | undefined;
    transformPokemon(pokemon: Pokemon, newEntry: Pkm): Pokemon;
    updateSynergies(): void;
    updateArtificialItems(previousSynergies: Map<Synergy, number>, updatedSynergies: Map<Synergy, number>): boolean;
    updateWeatherRocks(): void;
    updateTms(): void;
    updateFishingRods(): void;
    updateWildChance(): void;
    updateChefsHats(): void;
    updateRegionalPool(state: GameState, mapChanged: boolean): void;
    onLightChange(): void;
    registerPlayedPokemons(): void;
}
