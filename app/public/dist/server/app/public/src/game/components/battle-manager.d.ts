import { GameObjects } from "phaser";
import Simulation from "../../../../core/simulation";
import Count from "../../../../models/colyseus-models/count";
import Player from "../../../../models/colyseus-models/player";
import Status from "../../../../models/colyseus-models/status";
import { IBoardEvent, IPokemonEntity } from "../../../../types";
import { Ability } from "../../../../types/enum/Ability";
import { AttackType, HealType, Orientation } from "../../../../types/enum/Game";
import type { NonFunctionPropNames } from "../../../../types/HelperTypes";
import AnimationManager from "../animation-manager";
import GameScene from "../scenes/game-scene";
import PokemonSprite from "./pokemon";
export default class BattleManager {
    group: GameObjects.Group;
    scene: GameScene;
    simulation: Simulation | undefined;
    animationManager: AnimationManager;
    player: Player;
    boardEventSprites: Array<GameObjects.Sprite | null>;
    pokemonSprites: Map<string, PokemonSprite>;
    constructor(scene: GameScene, group: GameObjects.Group, simulation: Simulation | undefined, animationManager: AnimationManager, player: Player);
    get flip(): boolean;
    buildPokemons(): void;
    addPokemonEntitySprite(simulationId: string, pokemon: IPokemonEntity): void;
    clear(): void;
    removePokemon(simulationId: string, pokemon: IPokemonEntity): void;
    updatePokemonItems(simulationId: string, pokemon: IPokemonEntity): void;
    changeStatus(simulationId: string, pokemon: IPokemonEntity, field: NonFunctionPropNames<Status>, previousValue: any): void;
    changeCount(simulationId: string, pokemon: IPokemonEntity, field: NonFunctionPropNames<Count>, value: number, previousValue: number): void;
    changePokemon<F extends keyof IPokemonEntity>(simulationId: string, pokemon: IPokemonEntity, field: F, value: IPokemonEntity[F], previousValue: IPokemonEntity[F]): void;
    displayDodge(x: number, y: number): void;
    displayCriticalHit(x: number, y: number): void;
    displayBlockedSpell(x: number, y: number): void;
    displayManaBurn(x: number, y: number): void;
    displayTripleAttack(x: number, y: number): void;
    displayAbility(id: string, skill: Ability | string, orientation: Orientation, positionX: number, positionY: number, targetX?: number, targetY?: number, delay?: number): void;
    displayBoardEvent(event: IBoardEvent): void;
    clearBoardEvents(): void;
    displayHit(x: number, y: number): void;
    displayDamage(positionX: number, positionY: number, damage: number, type: AttackType, index: string, id: string): void;
    displayHeal(positionX: number, positionY: number, amount: number, type: HealType, index: string, id: string): void;
    displayTween(color: string, coordinates: number[], index: string, amount: number): void;
    setSimulation(simulation: Simulation): void;
    onSimulationStart(): void;
    setPlayer(player: Player): void;
}
